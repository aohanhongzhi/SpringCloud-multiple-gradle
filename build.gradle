/*
    buildscript代码块中的声明是gradle脚本自身需要的资源。
    可以声明的资源包括依赖项、第三方插件、maven仓库地址等。
    gradle在执行脚本时，会优先执行buildscript代码块中的内容，然后才会执行剩余的build脚本。
    该部分代码应该置顶
*/
buildscript {
    ext {
//        2.2.9是 GA版本，后期会有长期更新支持
        springBootVersion = '2.2.9.RELEASE'
    }
    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
        mavenCentral()
    }
    dependencies {
        /* 添加插件依赖路径（通过jar方式） */
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


plugins {
    id 'java'
    id 'idea'
    id "com.google.cloud.tools.jib" version "2.0.0"
    id "org.sonarqube" version "2.7"
}



/* 所有子项目的通用配置 */
subprojects {
    /* 使用二进制插件 */
    apply plugin: 'java' /* java是Gradle的核心插件，是内置的，内置插件不需要配置依赖路径 */
    apply plugin: 'idea' /* 同上  让Gradle自动生成Intellij的项目文件*/
    /* 注意gradle插件不再自动应用，所以这里需要指定 */
    apply plugin: 'org.springframework.boot'
    /* 依赖管理插件仍然是一个spring-boot-gradle-plugin传递依赖，所以无需在build.gradle配置中明确列出此依赖。 */
    apply plugin: 'io.spring.dependency-management' /* 依赖管理，用来传递spring的依赖 */
//    apply plugin: 'id "com.google.cloud.tools.jib" version "2.0.0"'


    group = 'hxy.dream'
    version = '1.0-SNAPSHOT'
    /* 指定jdk版本 */
    sourceCompatibility = 11
    targetCompatibility = 11

    /* java编译的时候缺省状态下会因为中文字符而失败 */
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }

    /* 添加通用依赖 */
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'


    }

}

group 'hxy.dream'
version '1.0-SNAPSHOT'


//下面是google构建docker镜像插件的配置
jib {
    from {
        image = 'registry.cn-shanghai.aliyuncs.com/starxin/docker-jib:1.0'
    }
    to {
        image = 'registry.cn-shanghai.aliyuncs.com/MyRegistry/projectM'
        auth {
            username = '登录账号'
            password = '登录密码'
        }
    }
    container {
        creationTime='USE_CURRENT_TIMESTAMP'
        jvmFlags = ['-Djava.security.egd=file:/dev/./urandom', '-Dspring.profiles.active=prod', '-Dfile.encoding=utf-8', '-Duser.timezone=GMT+08']
        mainClass = 'com.xxx.RunApplication'
        ports = ['8080']
    }
}
