/*
    buildscript代码块中的声明是gradle脚本自身需要的资源。
    可以声明的资源包括依赖项、第三方插件、maven仓库地址等。
    gradle在执行脚本时，会优先执行buildscript代码块中的内容，然后才会执行剩余的build脚本。
    该部分代码应该置顶
*/
buildscript {
    ext {
        springBootVersion = '3.2.1' // https://spring.io/projects/spring-boot#learn
    }
    repositories {
        mavenLocal()
        maven { name "Alibaba central"; url "https://maven.aliyun.com/repository/central" }
        maven { name "Alibaba"; url "https://maven.aliyun.com/repository/public" }
        maven { name "Alibaba google"; url "https://maven.aliyun.com/repository/google" }
        maven { name "Alibaba gradle-plugin"; url "https://maven.aliyun.com/repository/gradle-plugin" }
        maven { name "Alibaba spring"; url "https://maven.aliyun.com/repository/spring" }
        maven { name "Alibaba spring-plugin"; url "https://maven.aliyun.com/repository/spring-plugin" }
        maven { name "Alibaba grails-core"; url "https://maven.aliyun.com/repository/grails-core" }
        maven { name "Alibaba apache-snapshots"; url "https://maven.aliyun.com/repository/apache-snapshots" }
        maven {
            url "https://mirrors.huaweicloud.com/repository/maven/"
            name = "华为开源镜像库"
        }
        maven { url "https://repo.spring.io/libs-release" }
        mavenCentral()
    }
    dependencies {
        /* 添加插件依赖路径（通过jar方式） */
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


plugins {
    id 'io.spring.dependency-management' version '1.1.3'
    // https://github.com/spring-gradle-plugins/dependency-management-plugin
    id 'java-library'
    id 'idea'
    id "com.google.cloud.tools.jib" version "2.0.0"
}


java {
    sourceCompatibility = JavaVersion.VERSION_21
    /* 指定jdk版本 */
    targetCompatibility = JavaVersion.VERSION_21
}

description = "Spring Boot multi gradle project"

defaultTasks 'build'

allprojects {
    group = 'hxy.dream'
    version = '1.0-SNAPSHOT'

//    repositories {
//        mavenLocal()
//        maven { name "Alibaba central"; url "https://maven.aliyun.com/repository/central" }
//        maven { name "Alibaba"; url "https://maven.aliyun.com/repository/public" }
//        maven { name "Alibaba google"; url "https://maven.aliyun.com/repository/google" }
//        maven { name "Alibaba gradle-plugin"; url "https://maven.aliyun.com/repository/gradle-plugin" }
//        maven { name "Alibaba spring"; url "https://maven.aliyun.com/repository/spring" }
//        maven { name "Alibaba spring-plugin"; url "https://maven.aliyun.com/repository/spring-plugin" }
//        maven { name "Alibaba grails-core"; url "https://maven.aliyun.com/repository/grails-core" }
//        maven { name "Alibaba apache-snapshots"; url "https://maven.aliyun.com/repository/apache-snapshots" }
//        maven {
//            url "https://mirrors.huaweicloud.com/repository/maven/"
//            name = "华为开源镜像库"
//        }
//        maven { url "https://repo.spring.io/libs-release" }
//        mavenCentral()
//        if (version.contains('-')) {
//            maven { url "https://repo.spring.io/milestone" }
//        }
//        if (version.endsWith('-SNAPSHOT')) {
//            maven { url "https://repo.spring.io/snapshot" }
//        }
//
//        // 临时解决mybatis没有适配 SpringBoot3.0问题
//        maven { name "OSS Snapshot repository"; url "https://oss.sonatype.org/content/repositories/snapshots/" }
//    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, "minutes"
    }

    test {
        // 要用junit可以换成：useJUnitPlatform() TestNG更好更丰富
//        useTestNG()
        useJUnitPlatform()
    }
}

/* 所有子项目的通用配置 */
subprojects {
    /* 使用二进制插件 */
    apply plugin: 'java-library' /* java是Gradle的核心插件，是内置的，内置插件不需要配置依赖路径 */
    apply plugin: 'idea' /* 同上  让Gradle自动生成Intellij的项目文件*/
    /* 注意gradle插件不再自动应用，所以这里需要指定 */
    apply plugin: 'org.springframework.boot'
    /* 依赖管理插件仍然是一个spring-boot-gradle-plugin传递依赖，所以无需在build.gradle配置中明确列出此依赖。 */
    apply plugin: 'io.spring.dependency-management' /* 依赖管理，用来传递spring的依赖 */
//    apply plugin: 'id "com.google.cloud.tools.jib" version "2.0.0"'


    /* java编译的时候缺省状态下会因为中文字符而失败 */
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    repositories {
        mavenLocal()
//         <!--阿里云maven仓库更新会慢一两天左右，拉取失败的切换到maven中央仓库-->
        maven { name "Alibaba central"; url "https://maven.aliyun.com/repository/central" }
        maven { name "Alibaba"; url "https://maven.aliyun.com/repository/public" }
        maven { name "Alibaba google"; url "https://maven.aliyun.com/repository/google" }
        maven { name "Alibaba gradle-plugin"; url "https://maven.aliyun.com/repository/gradle-plugin" }
        maven { name "Alibaba spring"; url "https://maven.aliyun.com/repository/spring" }
        maven { name "Alibaba spring-plugin"; url "https://maven.aliyun.com/repository/spring-plugin" }
        maven { name "Alibaba grails-core"; url "https://maven.aliyun.com/repository/grails-core" }
        maven { name "Alibaba apache-snapshots"; url "https://maven.aliyun.com/repository/apache-snapshots" }
        maven {
            url "https://mirrors.huaweicloud.com/repository/maven/"
            name = "华为开源镜像库"
        }
        maven { url "https://repo.spring.io/libs-release" }
        mavenCentral()
    }

    /* 添加通用依赖 */
    dependencies {

//   暂不支持SpringBoot3     https://gitee.com/huoyo/ko-time/issues/I880X2
        implementation 'javax.servlet:javax.servlet-api:4.0.1'
        implementation 'cn.langpy:ko-time:2.4.2'
        implementation 'org.springframework.boot:spring-boot-starter-aop'
        implementation 'javax.annotation:javax.annotation-api:1.3.2'

        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'org.springframework.data:spring-data-redis'

        implementation 'com.zaxxer:HikariCP:5.0.1'
        implementation 'p6spy:p6spy:3.9.1'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'commons-io:commons-io:2.11.0'

        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.15.2' // 	Java 8 Datatypes
        implementation 'com.fasterxml.jackson:jackson-bom:2.15.2' // 	Java 8 Datatypes

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testImplementation 'io.projectreactor:reactor-test'

// https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-alibaba-sentinel
//        compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-alibaba-sentinel', version: '0.9.0.RELEASE'

    }

}

//下面是google构建docker镜像插件的配置
jib {
    from {
        image = 'registry.cn-shanghai.aliyuncs.com/starxin/docker-jib:1.0'
    }
    to {
        image = 'registry.cn-shanghai.aliyuncs.com/MyRegistry/projectM'
        auth {
            username = '登录账号'
            password = '登录密码'
        }
    }
    container {
        creationTime = 'USE_CURRENT_TIMESTAMP'
        jvmFlags = ['-Djava.security.egd=file:/dev/./urandom', '-Dspring.profiles.active=prod', '-Dfile.encoding=utf-8', '-Duser.timezone=GMT+08']
        mainClass = 'com.xxx.RunApplication'
        ports = ['8080']
    }
}